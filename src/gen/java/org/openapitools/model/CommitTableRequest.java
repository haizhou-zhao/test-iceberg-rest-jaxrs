/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.TableRequirement;
import org.openapitools.model.TableUpdate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * CommitTableRequest
 */
@JsonPropertyOrder({
  CommitTableRequest.JSON_PROPERTY_REQUIREMENTS,
  CommitTableRequest.JSON_PROPERTY_UPDATES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class CommitTableRequest   {
  public static final String JSON_PROPERTY_REQUIREMENTS = "requirements";
  @JsonProperty(JSON_PROPERTY_REQUIREMENTS)
  private List<TableRequirement> requirements = new ArrayList<>();

  public static final String JSON_PROPERTY_UPDATES = "updates";
  @JsonProperty(JSON_PROPERTY_UPDATES)
  private List<TableUpdate> updates = new ArrayList<>();

  public CommitTableRequest requirements(List<TableRequirement> requirements) {
    this.requirements = requirements;
    return this;
  }

  public CommitTableRequest addRequirementsItem(TableRequirement requirementsItem) {
    this.requirements.add(requirementsItem);
    return this;
  }

  /**
   * Get requirements
   * @return requirements
   **/
  @JsonProperty(value = "requirements")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public List<TableRequirement> getRequirements() {
    return requirements;
  }

  public void setRequirements(List<TableRequirement> requirements) {
    this.requirements = requirements;
  }

  public CommitTableRequest updates(List<TableUpdate> updates) {
    this.updates = updates;
    return this;
  }

  public CommitTableRequest addUpdatesItem(TableUpdate updatesItem) {
    this.updates.add(updatesItem);
    return this;
  }

  /**
   * Get updates
   * @return updates
   **/
  @JsonProperty(value = "updates")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public List<TableUpdate> getUpdates() {
    return updates;
  }

  public void setUpdates(List<TableUpdate> updates) {
    this.updates = updates;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitTableRequest commitTableRequest = (CommitTableRequest) o;
    return Objects.equals(this.requirements, commitTableRequest.requirements) &&
        Objects.equals(this.updates, commitTableRequest.updates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requirements, updates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitTableRequest {\n");
    
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

