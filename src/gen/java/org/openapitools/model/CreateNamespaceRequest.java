/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * CreateNamespaceRequest
 */
@JsonPropertyOrder({
  CreateNamespaceRequest.JSON_PROPERTY_NAMESPACE,
  CreateNamespaceRequest.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class CreateNamespaceRequest   {
  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  private List<String> namespace = new ArrayList<>();

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  private Map<String, String> properties = null;

  public CreateNamespaceRequest namespace(List<String> namespace) {
    this.namespace = namespace;
    return this;
  }

  public CreateNamespaceRequest addNamespaceItem(String namespaceItem) {
    this.namespace.add(namespaceItem);
    return this;
  }

  /**
   * Reference to one or more levels of a namespace
   * @return namespace
   **/
  @JsonProperty(value = "namespace")
  @ApiModelProperty(example = "[\"accounting\",\"tax\"]", required = true, value = "Reference to one or more levels of a namespace")
  @NotNull 
  public List<String> getNamespace() {
    return namespace;
  }

  public void setNamespace(List<String> namespace) {
    this.namespace = namespace;
  }

  public CreateNamespaceRequest properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public CreateNamespaceRequest putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Configured string to string map of properties for the namespace
   * @return properties
   **/
  @JsonProperty(value = "properties")
  @ApiModelProperty(example = "{\"owner\":\"Hank Bendickson\"}", value = "Configured string to string map of properties for the namespace")
  
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNamespaceRequest createNamespaceRequest = (CreateNamespaceRequest) o;
    return Objects.equals(this.namespace, createNamespaceRequest.namespace) &&
        Objects.equals(this.properties, createNamespaceRequest.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespace, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNamespaceRequest {\n");
    
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

