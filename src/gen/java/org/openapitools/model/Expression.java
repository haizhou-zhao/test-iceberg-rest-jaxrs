/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.AndOrExpression;
import org.openapitools.model.LiteralExpression;
import org.openapitools.model.NotExpression;
import org.openapitools.model.SetExpression;
import org.openapitools.model.Term;
import org.openapitools.model.UnaryExpression;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Expression
 */
@JsonPropertyOrder({
  Expression.JSON_PROPERTY_TYPE,
  Expression.JSON_PROPERTY_LEFT,
  Expression.JSON_PROPERTY_RIGHT,
  Expression.JSON_PROPERTY_CHILD,
  Expression.JSON_PROPERTY_TERM,
  Expression.JSON_PROPERTY_VALUES,
  Expression.JSON_PROPERTY_VALUE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class Expression   {
  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private String type;

  public static final String JSON_PROPERTY_LEFT = "left";
  @JsonProperty(JSON_PROPERTY_LEFT)
  private Expression left;

  public static final String JSON_PROPERTY_RIGHT = "right";
  @JsonProperty(JSON_PROPERTY_RIGHT)
  private Expression right;

  public static final String JSON_PROPERTY_CHILD = "child";
  @JsonProperty(JSON_PROPERTY_CHILD)
  private Expression child;

  public static final String JSON_PROPERTY_TERM = "term";
  @JsonProperty(JSON_PROPERTY_TERM)
  private Term term;

  public static final String JSON_PROPERTY_VALUES = "values";
  @JsonProperty(JSON_PROPERTY_VALUES)
  private List<Object> values = new ArrayList<>();

  public static final String JSON_PROPERTY_VALUE = "value";
  @JsonProperty(JSON_PROPERTY_VALUE)
  private Object value;

  public Expression type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(example = "[\"eq\",\"and\",\"or\",\"not\",\"in\",\"not-in\",\"lt\",\"lt-eq\",\"gt\",\"gt-eq\",\"not-eq\",\"starts-with\",\"not-starts-with\",\"is-null\",\"not-null\",\"is-nan\",\"not-nan\"]", required = true, value = "")
  @NotNull 
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Expression left(Expression left) {
    this.left = left;
    return this;
  }

  /**
   * Get left
   * @return left
   **/
  @JsonProperty(value = "left")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Expression getLeft() {
    return left;
  }

  public void setLeft(Expression left) {
    this.left = left;
  }

  public Expression right(Expression right) {
    this.right = right;
    return this;
  }

  /**
   * Get right
   * @return right
   **/
  @JsonProperty(value = "right")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Expression getRight() {
    return right;
  }

  public void setRight(Expression right) {
    this.right = right;
  }

  public Expression child(Expression child) {
    this.child = child;
    return this;
  }

  /**
   * Get child
   * @return child
   **/
  @JsonProperty(value = "child")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Expression getChild() {
    return child;
  }

  public void setChild(Expression child) {
    this.child = child;
  }

  public Expression term(Term term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   **/
  @JsonProperty(value = "term")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Term getTerm() {
    return term;
  }

  public void setTerm(Term term) {
    this.term = term;
  }

  public Expression values(List<Object> values) {
    this.values = values;
    return this;
  }

  public Expression addValuesItem(Object valuesItem) {
    this.values.add(valuesItem);
    return this;
  }

  /**
   * Get values
   * @return values
   **/
  @JsonProperty(value = "values")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public List<Object> getValues() {
    return values;
  }

  public void setValues(List<Object> values) {
    this.values = values;
  }

  public Expression value(Object value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   **/
  @JsonProperty(value = "value")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Expression expression = (Expression) o;
    return Objects.equals(this.type, expression.type) &&
        Objects.equals(this.left, expression.left) &&
        Objects.equals(this.right, expression.right) &&
        Objects.equals(this.child, expression.child) &&
        Objects.equals(this.term, expression.term) &&
        Objects.equals(this.values, expression.values) &&
        Objects.equals(this.value, expression.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, left, right, child, term, values, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Expression {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    child: ").append(toIndentedString(child)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

