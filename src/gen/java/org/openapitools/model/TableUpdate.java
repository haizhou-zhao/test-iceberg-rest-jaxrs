/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.model.AddPartitionSpecUpdate;
import org.openapitools.model.AddSchemaUpdate;
import org.openapitools.model.AddSnapshotUpdate;
import org.openapitools.model.AddSortOrderUpdate;
import org.openapitools.model.PartitionSpec;
import org.openapitools.model.RemovePropertiesUpdate;
import org.openapitools.model.RemoveSnapshotRefUpdate;
import org.openapitools.model.RemoveSnapshotsUpdate;
import org.openapitools.model.Schema;
import org.openapitools.model.SetCurrentSchemaUpdate;
import org.openapitools.model.SetDefaultSortOrderUpdate;
import org.openapitools.model.SetDefaultSpecUpdate;
import org.openapitools.model.SetLocationUpdate;
import org.openapitools.model.SetPropertiesUpdate;
import org.openapitools.model.SetSnapshotRefUpdate;
import org.openapitools.model.Snapshot;
import org.openapitools.model.SortOrder;
import org.openapitools.model.UpgradeFormatVersionUpdate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * TableUpdate
 */
@JsonPropertyOrder({
  TableUpdate.JSON_PROPERTY_ACTION,
  TableUpdate.JSON_PROPERTY_FORMAT_VERSION,
  TableUpdate.JSON_PROPERTY_SCHEMA,
  TableUpdate.JSON_PROPERTY_SCHEMA_ID,
  TableUpdate.JSON_PROPERTY_SPEC,
  TableUpdate.JSON_PROPERTY_SPEC_ID,
  TableUpdate.JSON_PROPERTY_SORT_ORDER,
  TableUpdate.JSON_PROPERTY_SORT_ORDER_ID,
  TableUpdate.JSON_PROPERTY_SNAPSHOT,
  TableUpdate.JSON_PROPERTY_TYPE,
  TableUpdate.JSON_PROPERTY_SNAPSHOT_ID,
  TableUpdate.JSON_PROPERTY_MAX_REF_AGE_MS,
  TableUpdate.JSON_PROPERTY_MAX_SNAPSHOT_AGE_MS,
  TableUpdate.JSON_PROPERTY_MIN_SNAPSHOTS_TO_KEEP,
  TableUpdate.JSON_PROPERTY_REF_NAME,
  TableUpdate.JSON_PROPERTY_SNAPSHOT_IDS,
  TableUpdate.JSON_PROPERTY_LOCATION,
  TableUpdate.JSON_PROPERTY_UPDATES,
  TableUpdate.JSON_PROPERTY_REMOVALS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class TableUpdate   {
  /**
   * Gets or Sets action
   */
  public enum ActionEnum {
    UPGRADE_FORMAT_VERSION("upgrade-format-version"),
    
    ADD_SCHEMA("add-schema"),
    
    SET_CURRENT_SCHEMA("set-current-schema"),
    
    ADD_SPEC("add-spec"),
    
    SET_DEFAULT_SPEC("set-default-spec"),
    
    ADD_SORT_ORDER("add-sort-order"),
    
    SET_DEFAULT_SORT_ORDER("set-default-sort-order"),
    
    ADD_SNAPSHOT("add-snapshot"),
    
    SET_SNAPSHOT_REF("set-snapshot-ref"),
    
    REMOVE_SNAPSHOTS("remove-snapshots"),
    
    REMOVE_SNAPSHOT_REF("remove-snapshot-ref"),
    
    SET_LOCATION("set-location"),
    
    SET_PROPERTIES("set-properties"),
    
    REMOVE_PROPERTIES("remove-properties");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTION = "action";
  @JsonProperty(JSON_PROPERTY_ACTION)
  private ActionEnum action;

  public static final String JSON_PROPERTY_FORMAT_VERSION = "format-version";
  @JsonProperty(JSON_PROPERTY_FORMAT_VERSION)
  private Integer formatVersion;

  public static final String JSON_PROPERTY_SCHEMA = "schema";
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  private Schema schema;

  public static final String JSON_PROPERTY_SCHEMA_ID = "schema-id";
  @JsonProperty(JSON_PROPERTY_SCHEMA_ID)
  private Integer schemaId;

  public static final String JSON_PROPERTY_SPEC = "spec";
  @JsonProperty(JSON_PROPERTY_SPEC)
  private PartitionSpec spec;

  public static final String JSON_PROPERTY_SPEC_ID = "spec-id";
  @JsonProperty(JSON_PROPERTY_SPEC_ID)
  private Integer specId;

  public static final String JSON_PROPERTY_SORT_ORDER = "sort-order";
  @JsonProperty(JSON_PROPERTY_SORT_ORDER)
  private SortOrder sortOrder;

  public static final String JSON_PROPERTY_SORT_ORDER_ID = "sort-order-id";
  @JsonProperty(JSON_PROPERTY_SORT_ORDER_ID)
  private Integer sortOrderId;

  public static final String JSON_PROPERTY_SNAPSHOT = "snapshot";
  @JsonProperty(JSON_PROPERTY_SNAPSHOT)
  private Snapshot snapshot;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    TAG("tag"),
    
    BRANCH("branch");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private TypeEnum type;

  public static final String JSON_PROPERTY_SNAPSHOT_ID = "snapshot-id";
  @JsonProperty(JSON_PROPERTY_SNAPSHOT_ID)
  private Long snapshotId;

  public static final String JSON_PROPERTY_MAX_REF_AGE_MS = "max-ref-age-ms";
  @JsonProperty(JSON_PROPERTY_MAX_REF_AGE_MS)
  private Long maxRefAgeMs;

  public static final String JSON_PROPERTY_MAX_SNAPSHOT_AGE_MS = "max-snapshot-age-ms";
  @JsonProperty(JSON_PROPERTY_MAX_SNAPSHOT_AGE_MS)
  private Long maxSnapshotAgeMs;

  public static final String JSON_PROPERTY_MIN_SNAPSHOTS_TO_KEEP = "min-snapshots-to-keep";
  @JsonProperty(JSON_PROPERTY_MIN_SNAPSHOTS_TO_KEEP)
  private Integer minSnapshotsToKeep;

  public static final String JSON_PROPERTY_REF_NAME = "ref-name";
  @JsonProperty(JSON_PROPERTY_REF_NAME)
  private String refName;

  public static final String JSON_PROPERTY_SNAPSHOT_IDS = "snapshot-ids";
  @JsonProperty(JSON_PROPERTY_SNAPSHOT_IDS)
  private List<Long> snapshotIds = new ArrayList<>();

  public static final String JSON_PROPERTY_LOCATION = "location";
  @JsonProperty(JSON_PROPERTY_LOCATION)
  private String location;

  public static final String JSON_PROPERTY_UPDATES = "updates";
  @JsonProperty(JSON_PROPERTY_UPDATES)
  private Map<String, String> updates = new HashMap<>();

  public static final String JSON_PROPERTY_REMOVALS = "removals";
  @JsonProperty(JSON_PROPERTY_REMOVALS)
  private List<String> removals = new ArrayList<>();

  public TableUpdate action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   **/
  @JsonProperty(value = "action")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public TableUpdate formatVersion(Integer formatVersion) {
    this.formatVersion = formatVersion;
    return this;
  }

  /**
   * Get formatVersion
   * @return formatVersion
   **/
  @JsonProperty(value = "format-version")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Integer getFormatVersion() {
    return formatVersion;
  }

  public void setFormatVersion(Integer formatVersion) {
    this.formatVersion = formatVersion;
  }

  public TableUpdate schema(Schema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   **/
  @JsonProperty(value = "schema")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Schema getSchema() {
    return schema;
  }

  public void setSchema(Schema schema) {
    this.schema = schema;
  }

  public TableUpdate schemaId(Integer schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * Schema ID to set as current, or -1 to set last added schema
   * @return schemaId
   **/
  @JsonProperty(value = "schema-id")
  @ApiModelProperty(required = true, value = "Schema ID to set as current, or -1 to set last added schema")
  @NotNull 
  public Integer getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(Integer schemaId) {
    this.schemaId = schemaId;
  }

  public TableUpdate spec(PartitionSpec spec) {
    this.spec = spec;
    return this;
  }

  /**
   * Get spec
   * @return spec
   **/
  @JsonProperty(value = "spec")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public PartitionSpec getSpec() {
    return spec;
  }

  public void setSpec(PartitionSpec spec) {
    this.spec = spec;
  }

  public TableUpdate specId(Integer specId) {
    this.specId = specId;
    return this;
  }

  /**
   * Partition spec ID to set as the default, or -1 to set last added spec
   * @return specId
   **/
  @JsonProperty(value = "spec-id")
  @ApiModelProperty(required = true, value = "Partition spec ID to set as the default, or -1 to set last added spec")
  @NotNull 
  public Integer getSpecId() {
    return specId;
  }

  public void setSpecId(Integer specId) {
    this.specId = specId;
  }

  public TableUpdate sortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   **/
  @JsonProperty(value = "sort-order")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public SortOrder getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
  }

  public TableUpdate sortOrderId(Integer sortOrderId) {
    this.sortOrderId = sortOrderId;
    return this;
  }

  /**
   * Sort order ID to set as the default, or -1 to set last added sort order
   * @return sortOrderId
   **/
  @JsonProperty(value = "sort-order-id")
  @ApiModelProperty(required = true, value = "Sort order ID to set as the default, or -1 to set last added sort order")
  @NotNull 
  public Integer getSortOrderId() {
    return sortOrderId;
  }

  public void setSortOrderId(Integer sortOrderId) {
    this.sortOrderId = sortOrderId;
  }

  public TableUpdate snapshot(Snapshot snapshot) {
    this.snapshot = snapshot;
    return this;
  }

  /**
   * Get snapshot
   * @return snapshot
   **/
  @JsonProperty(value = "snapshot")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Snapshot getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(Snapshot snapshot) {
    this.snapshot = snapshot;
  }

  public TableUpdate type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TableUpdate snapshotId(Long snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * Get snapshotId
   * @return snapshotId
   **/
  @JsonProperty(value = "snapshot-id")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Long getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(Long snapshotId) {
    this.snapshotId = snapshotId;
  }

  public TableUpdate maxRefAgeMs(Long maxRefAgeMs) {
    this.maxRefAgeMs = maxRefAgeMs;
    return this;
  }

  /**
   * Get maxRefAgeMs
   * @return maxRefAgeMs
   **/
  @JsonProperty(value = "max-ref-age-ms")
  @ApiModelProperty(value = "")
  
  public Long getMaxRefAgeMs() {
    return maxRefAgeMs;
  }

  public void setMaxRefAgeMs(Long maxRefAgeMs) {
    this.maxRefAgeMs = maxRefAgeMs;
  }

  public TableUpdate maxSnapshotAgeMs(Long maxSnapshotAgeMs) {
    this.maxSnapshotAgeMs = maxSnapshotAgeMs;
    return this;
  }

  /**
   * Get maxSnapshotAgeMs
   * @return maxSnapshotAgeMs
   **/
  @JsonProperty(value = "max-snapshot-age-ms")
  @ApiModelProperty(value = "")
  
  public Long getMaxSnapshotAgeMs() {
    return maxSnapshotAgeMs;
  }

  public void setMaxSnapshotAgeMs(Long maxSnapshotAgeMs) {
    this.maxSnapshotAgeMs = maxSnapshotAgeMs;
  }

  public TableUpdate minSnapshotsToKeep(Integer minSnapshotsToKeep) {
    this.minSnapshotsToKeep = minSnapshotsToKeep;
    return this;
  }

  /**
   * Get minSnapshotsToKeep
   * @return minSnapshotsToKeep
   **/
  @JsonProperty(value = "min-snapshots-to-keep")
  @ApiModelProperty(value = "")
  
  public Integer getMinSnapshotsToKeep() {
    return minSnapshotsToKeep;
  }

  public void setMinSnapshotsToKeep(Integer minSnapshotsToKeep) {
    this.minSnapshotsToKeep = minSnapshotsToKeep;
  }

  public TableUpdate refName(String refName) {
    this.refName = refName;
    return this;
  }

  /**
   * Get refName
   * @return refName
   **/
  @JsonProperty(value = "ref-name")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public String getRefName() {
    return refName;
  }

  public void setRefName(String refName) {
    this.refName = refName;
  }

  public TableUpdate snapshotIds(List<Long> snapshotIds) {
    this.snapshotIds = snapshotIds;
    return this;
  }

  public TableUpdate addSnapshotIdsItem(Long snapshotIdsItem) {
    this.snapshotIds.add(snapshotIdsItem);
    return this;
  }

  /**
   * Get snapshotIds
   * @return snapshotIds
   **/
  @JsonProperty(value = "snapshot-ids")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public List<Long> getSnapshotIds() {
    return snapshotIds;
  }

  public void setSnapshotIds(List<Long> snapshotIds) {
    this.snapshotIds = snapshotIds;
  }

  public TableUpdate location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   **/
  @JsonProperty(value = "location")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public TableUpdate updates(Map<String, String> updates) {
    this.updates = updates;
    return this;
  }

  public TableUpdate putUpdatesItem(String key, String updatesItem) {
    this.updates.put(key, updatesItem);
    return this;
  }

  /**
   * Get updates
   * @return updates
   **/
  @JsonProperty(value = "updates")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Map<String, String> getUpdates() {
    return updates;
  }

  public void setUpdates(Map<String, String> updates) {
    this.updates = updates;
  }

  public TableUpdate removals(List<String> removals) {
    this.removals = removals;
    return this;
  }

  public TableUpdate addRemovalsItem(String removalsItem) {
    this.removals.add(removalsItem);
    return this;
  }

  /**
   * Get removals
   * @return removals
   **/
  @JsonProperty(value = "removals")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public List<String> getRemovals() {
    return removals;
  }

  public void setRemovals(List<String> removals) {
    this.removals = removals;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableUpdate tableUpdate = (TableUpdate) o;
    return Objects.equals(this.action, tableUpdate.action) &&
        Objects.equals(this.formatVersion, tableUpdate.formatVersion) &&
        Objects.equals(this.schema, tableUpdate.schema) &&
        Objects.equals(this.schemaId, tableUpdate.schemaId) &&
        Objects.equals(this.spec, tableUpdate.spec) &&
        Objects.equals(this.specId, tableUpdate.specId) &&
        Objects.equals(this.sortOrder, tableUpdate.sortOrder) &&
        Objects.equals(this.sortOrderId, tableUpdate.sortOrderId) &&
        Objects.equals(this.snapshot, tableUpdate.snapshot) &&
        Objects.equals(this.type, tableUpdate.type) &&
        Objects.equals(this.snapshotId, tableUpdate.snapshotId) &&
        Objects.equals(this.maxRefAgeMs, tableUpdate.maxRefAgeMs) &&
        Objects.equals(this.maxSnapshotAgeMs, tableUpdate.maxSnapshotAgeMs) &&
        Objects.equals(this.minSnapshotsToKeep, tableUpdate.minSnapshotsToKeep) &&
        Objects.equals(this.refName, tableUpdate.refName) &&
        Objects.equals(this.snapshotIds, tableUpdate.snapshotIds) &&
        Objects.equals(this.location, tableUpdate.location) &&
        Objects.equals(this.updates, tableUpdate.updates) &&
        Objects.equals(this.removals, tableUpdate.removals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, formatVersion, schema, schemaId, spec, specId, sortOrder, sortOrderId, snapshot, type, snapshotId, maxRefAgeMs, maxSnapshotAgeMs, minSnapshotsToKeep, refName, snapshotIds, location, updates, removals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableUpdate {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    formatVersion: ").append(toIndentedString(formatVersion)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    specId: ").append(toIndentedString(specId)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    sortOrderId: ").append(toIndentedString(sortOrderId)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    maxRefAgeMs: ").append(toIndentedString(maxRefAgeMs)).append("\n");
    sb.append("    maxSnapshotAgeMs: ").append(toIndentedString(maxSnapshotAgeMs)).append("\n");
    sb.append("    minSnapshotsToKeep: ").append(toIndentedString(minSnapshotsToKeep)).append("\n");
    sb.append("    refName: ").append(toIndentedString(refName)).append("\n");
    sb.append("    snapshotIds: ").append(toIndentedString(snapshotIds)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("    removals: ").append(toIndentedString(removals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

