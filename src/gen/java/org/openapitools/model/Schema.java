/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.StructField;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Schema
 */
@JsonPropertyOrder({
  Schema.JSON_PROPERTY_TYPE,
  Schema.JSON_PROPERTY_FIELDS,
  Schema.JSON_PROPERTY_SCHEMA_ID,
  Schema.JSON_PROPERTY_IDENTIFIER_FIELD_IDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class Schema   {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    STRUCT("struct");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private TypeEnum type;

  public static final String JSON_PROPERTY_FIELDS = "fields";
  @JsonProperty(JSON_PROPERTY_FIELDS)
  private List<StructField> fields = new ArrayList<>();

  public static final String JSON_PROPERTY_SCHEMA_ID = "schema-id";
  @JsonProperty(JSON_PROPERTY_SCHEMA_ID)
  private Integer schemaId;

  public static final String JSON_PROPERTY_IDENTIFIER_FIELD_IDS = "identifier-field-ids";
  @JsonProperty(JSON_PROPERTY_IDENTIFIER_FIELD_IDS)
  private List<Integer> identifierFieldIds = null;

  public Schema type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Schema fields(List<StructField> fields) {
    this.fields = fields;
    return this;
  }

  public Schema addFieldsItem(StructField fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   **/
  @JsonProperty(value = "fields")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public List<StructField> getFields() {
    return fields;
  }

  public void setFields(List<StructField> fields) {
    this.fields = fields;
  }

  public Schema schemaId(Integer schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * Get schemaId
   * @return schemaId
   **/
  @JsonProperty(value = "schema-id", access = JsonProperty.Access.READ_ONLY)
  @ApiModelProperty(value = "")
  
  public Integer getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(Integer schemaId) {
    this.schemaId = schemaId;
  }

  public Schema identifierFieldIds(List<Integer> identifierFieldIds) {
    this.identifierFieldIds = identifierFieldIds;
    return this;
  }

  public Schema addIdentifierFieldIdsItem(Integer identifierFieldIdsItem) {
    if (this.identifierFieldIds == null) {
      this.identifierFieldIds = new ArrayList<>();
    }
    this.identifierFieldIds.add(identifierFieldIdsItem);
    return this;
  }

  /**
   * Get identifierFieldIds
   * @return identifierFieldIds
   **/
  @JsonProperty(value = "identifier-field-ids")
  @ApiModelProperty(value = "")
  
  public List<Integer> getIdentifierFieldIds() {
    return identifierFieldIds;
  }

  public void setIdentifierFieldIds(List<Integer> identifierFieldIds) {
    this.identifierFieldIds = identifierFieldIds;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schema schema = (Schema) o;
    return Objects.equals(this.type, schema.type) &&
        Objects.equals(this.fields, schema.fields) &&
        Objects.equals(this.schemaId, schema.schemaId) &&
        Objects.equals(this.identifierFieldIds, schema.identifierFieldIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, fields, schemaId, identifierFieldIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schema {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    identifierFieldIds: ").append(toIndentedString(identifierFieldIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

