/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.ListType;
import org.openapitools.model.MapType;
import org.openapitools.model.StructField;
import org.openapitools.model.StructType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Type
 */
@JsonPropertyOrder({
  Type.JSON_PROPERTY_TYPE,
  Type.JSON_PROPERTY_FIELDS,
  Type.JSON_PROPERTY_ELEMENT_ID,
  Type.JSON_PROPERTY_ELEMENT,
  Type.JSON_PROPERTY_ELEMENT_REQUIRED,
  Type.JSON_PROPERTY_KEY_ID,
  Type.JSON_PROPERTY_KEY,
  Type.JSON_PROPERTY_VALUE_ID,
  Type.JSON_PROPERTY_VALUE,
  Type.JSON_PROPERTY_VALUE_REQUIRED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class Type   {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    MAP("map");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private TypeEnum type;

  public static final String JSON_PROPERTY_FIELDS = "fields";
  @JsonProperty(JSON_PROPERTY_FIELDS)
  private List<StructField> fields = new ArrayList<>();

  public static final String JSON_PROPERTY_ELEMENT_ID = "element-id";
  @JsonProperty(JSON_PROPERTY_ELEMENT_ID)
  private Integer elementId;

  public static final String JSON_PROPERTY_ELEMENT = "element";
  @JsonProperty(JSON_PROPERTY_ELEMENT)
  private Type element;

  public static final String JSON_PROPERTY_ELEMENT_REQUIRED = "element-required";
  @JsonProperty(JSON_PROPERTY_ELEMENT_REQUIRED)
  private Boolean elementRequired;

  public static final String JSON_PROPERTY_KEY_ID = "key-id";
  @JsonProperty(JSON_PROPERTY_KEY_ID)
  private Integer keyId;

  public static final String JSON_PROPERTY_KEY = "key";
  @JsonProperty(JSON_PROPERTY_KEY)
  private Type key;

  public static final String JSON_PROPERTY_VALUE_ID = "value-id";
  @JsonProperty(JSON_PROPERTY_VALUE_ID)
  private Integer valueId;

  public static final String JSON_PROPERTY_VALUE = "value";
  @JsonProperty(JSON_PROPERTY_VALUE)
  private Type value;

  public static final String JSON_PROPERTY_VALUE_REQUIRED = "value-required";
  @JsonProperty(JSON_PROPERTY_VALUE_REQUIRED)
  private Boolean valueRequired;

  public Type type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Type fields(List<StructField> fields) {
    this.fields = fields;
    return this;
  }

  public Type addFieldsItem(StructField fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   **/
  @JsonProperty(value = "fields")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public List<StructField> getFields() {
    return fields;
  }

  public void setFields(List<StructField> fields) {
    this.fields = fields;
  }

  public Type elementId(Integer elementId) {
    this.elementId = elementId;
    return this;
  }

  /**
   * Get elementId
   * @return elementId
   **/
  @JsonProperty(value = "element-id")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Integer getElementId() {
    return elementId;
  }

  public void setElementId(Integer elementId) {
    this.elementId = elementId;
  }

  public Type element(Type element) {
    this.element = element;
    return this;
  }

  /**
   * Get element
   * @return element
   **/
  @JsonProperty(value = "element")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Type getElement() {
    return element;
  }

  public void setElement(Type element) {
    this.element = element;
  }

  public Type elementRequired(Boolean elementRequired) {
    this.elementRequired = elementRequired;
    return this;
  }

  /**
   * Get elementRequired
   * @return elementRequired
   **/
  @JsonProperty(value = "element-required")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Boolean getElementRequired() {
    return elementRequired;
  }

  public void setElementRequired(Boolean elementRequired) {
    this.elementRequired = elementRequired;
  }

  public Type keyId(Integer keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * Get keyId
   * @return keyId
   **/
  @JsonProperty(value = "key-id")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Integer getKeyId() {
    return keyId;
  }

  public void setKeyId(Integer keyId) {
    this.keyId = keyId;
  }

  public Type key(Type key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   **/
  @JsonProperty(value = "key")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Type getKey() {
    return key;
  }

  public void setKey(Type key) {
    this.key = key;
  }

  public Type valueId(Integer valueId) {
    this.valueId = valueId;
    return this;
  }

  /**
   * Get valueId
   * @return valueId
   **/
  @JsonProperty(value = "value-id")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Integer getValueId() {
    return valueId;
  }

  public void setValueId(Integer valueId) {
    this.valueId = valueId;
  }

  public Type value(Type value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   **/
  @JsonProperty(value = "value")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Type getValue() {
    return value;
  }

  public void setValue(Type value) {
    this.value = value;
  }

  public Type valueRequired(Boolean valueRequired) {
    this.valueRequired = valueRequired;
    return this;
  }

  /**
   * Get valueRequired
   * @return valueRequired
   **/
  @JsonProperty(value = "value-required")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Boolean getValueRequired() {
    return valueRequired;
  }

  public void setValueRequired(Boolean valueRequired) {
    this.valueRequired = valueRequired;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Type type = (Type) o;
    return Objects.equals(this.type, type.type) &&
        Objects.equals(this.fields, type.fields) &&
        Objects.equals(this.elementId, type.elementId) &&
        Objects.equals(this.element, type.element) &&
        Objects.equals(this.elementRequired, type.elementRequired) &&
        Objects.equals(this.keyId, type.keyId) &&
        Objects.equals(this.key, type.key) &&
        Objects.equals(this.valueId, type.valueId) &&
        Objects.equals(this.value, type.value) &&
        Objects.equals(this.valueRequired, type.valueRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, fields, elementId, element, elementRequired, keyId, key, valueId, value, valueRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Type {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    elementId: ").append(toIndentedString(elementId)).append("\n");
    sb.append("    element: ").append(toIndentedString(element)).append("\n");
    sb.append("    elementRequired: ").append(toIndentedString(elementRequired)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    valueId: ").append(toIndentedString(valueId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueRequired: ").append(toIndentedString(valueRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

