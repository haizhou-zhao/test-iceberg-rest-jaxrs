/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.model.TokenType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * GetToken200Response
 */
@JsonPropertyOrder({
  GetToken200Response.JSON_PROPERTY_ACCESS_TOKEN,
  GetToken200Response.JSON_PROPERTY_TOKEN_TYPE,
  GetToken200Response.JSON_PROPERTY_EXPIRES_IN,
  GetToken200Response.JSON_PROPERTY_ISSUED_TOKEN_TYPE,
  GetToken200Response.JSON_PROPERTY_REFRESH_TOKEN,
  GetToken200Response.JSON_PROPERTY_SCOPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class GetToken200Response   {
  public static final String JSON_PROPERTY_ACCESS_TOKEN = "access_token";
  @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
  private String accessToken;

  /**
   * Access token type for client credentials or token exchange  See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1
   */
  public enum TokenTypeEnum {
    BEARER("bearer"),
    
    MAC("mac"),
    
    N_A("N_A");

    private String value;

    TokenTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TokenTypeEnum fromValue(String value) {
      for (TokenTypeEnum b : TokenTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TOKEN_TYPE = "token_type";
  @JsonProperty(JSON_PROPERTY_TOKEN_TYPE)
  private TokenTypeEnum tokenType;

  public static final String JSON_PROPERTY_EXPIRES_IN = "expires_in";
  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  private Integer expiresIn;

  public static final String JSON_PROPERTY_ISSUED_TOKEN_TYPE = "issued_token_type";
  @JsonProperty(JSON_PROPERTY_ISSUED_TOKEN_TYPE)
  private TokenType issuedTokenType;

  public static final String JSON_PROPERTY_REFRESH_TOKEN = "refresh_token";
  @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
  private String refreshToken;

  public static final String JSON_PROPERTY_SCOPE = "scope";
  @JsonProperty(JSON_PROPERTY_SCOPE)
  private String scope;

  public GetToken200Response accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * The access token, for client credentials or token exchange
   * @return accessToken
   **/
  @JsonProperty(value = "access_token")
  @ApiModelProperty(required = true, value = "The access token, for client credentials or token exchange")
  @NotNull 
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }

  public GetToken200Response tokenType(TokenTypeEnum tokenType) {
    this.tokenType = tokenType;
    return this;
  }

  /**
   * Access token type for client credentials or token exchange  See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1
   * @return tokenType
   **/
  @JsonProperty(value = "token_type")
  @ApiModelProperty(required = true, value = "Access token type for client credentials or token exchange  See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1")
  @NotNull 
  public TokenTypeEnum getTokenType() {
    return tokenType;
  }

  public void setTokenType(TokenTypeEnum tokenType) {
    this.tokenType = tokenType;
  }

  public GetToken200Response expiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Lifetime of the access token in seconds for client credentials or token exchange
   * @return expiresIn
   **/
  @JsonProperty(value = "expires_in")
  @ApiModelProperty(value = "Lifetime of the access token in seconds for client credentials or token exchange")
  
  public Integer getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
  }

  public GetToken200Response issuedTokenType(TokenType issuedTokenType) {
    this.issuedTokenType = issuedTokenType;
    return this;
  }

  /**
   * Get issuedTokenType
   * @return issuedTokenType
   **/
  @JsonProperty(value = "issued_token_type")
  @ApiModelProperty(value = "")
  @Valid 
  public TokenType getIssuedTokenType() {
    return issuedTokenType;
  }

  public void setIssuedTokenType(TokenType issuedTokenType) {
    this.issuedTokenType = issuedTokenType;
  }

  public GetToken200Response refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * Refresh token for client credentials or token exchange
   * @return refreshToken
   **/
  @JsonProperty(value = "refresh_token")
  @ApiModelProperty(value = "Refresh token for client credentials or token exchange")
  
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }

  public GetToken200Response scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Authorization scope for client credentials or token exchange
   * @return scope
   **/
  @JsonProperty(value = "scope")
  @ApiModelProperty(value = "Authorization scope for client credentials or token exchange")
  
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetToken200Response getToken200Response = (GetToken200Response) o;
    return Objects.equals(this.accessToken, getToken200Response.accessToken) &&
        Objects.equals(this.tokenType, getToken200Response.tokenType) &&
        Objects.equals(this.expiresIn, getToken200Response.expiresIn) &&
        Objects.equals(this.issuedTokenType, getToken200Response.issuedTokenType) &&
        Objects.equals(this.refreshToken, getToken200Response.refreshToken) &&
        Objects.equals(this.scope, getToken200Response.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, tokenType, expiresIn, issuedTokenType, refreshToken, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetToken200Response {\n");
    
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    issuedTokenType: ").append(toIndentedString(issuedTokenType)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

