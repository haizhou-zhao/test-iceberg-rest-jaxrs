/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * JSON error payload returned in a response with further details on the error
 */
@ApiModel(description = "JSON error payload returned in a response with further details on the error")
@JsonPropertyOrder({
  ErrorModel.JSON_PROPERTY_MESSAGE,
  ErrorModel.JSON_PROPERTY_TYPE,
  ErrorModel.JSON_PROPERTY_CODE,
  ErrorModel.JSON_PROPERTY_STACK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class ErrorModel   {
  public static final String JSON_PROPERTY_MESSAGE = "message";
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  private String message;

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private String type;

  public static final String JSON_PROPERTY_CODE = "code";
  @JsonProperty(JSON_PROPERTY_CODE)
  private Integer code;

  public static final String JSON_PROPERTY_STACK = "stack";
  @JsonProperty(JSON_PROPERTY_STACK)
  private List<String> stack = null;

  public ErrorModel message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Human-readable error message
   * @return message
   **/
  @JsonProperty(value = "message")
  @ApiModelProperty(required = true, value = "Human-readable error message")
  @NotNull 
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ErrorModel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Internal type definition of the error
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(example = "NoSuchNamespaceException", required = true, value = "Internal type definition of the error")
  @NotNull 
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ErrorModel code(Integer code) {
    this.code = code;
    return this;
  }

  /**
   * HTTP response code
   * minimum: 400
   * maximum: 600
   * @return code
   **/
  @JsonProperty(value = "code")
  @ApiModelProperty(example = "404", required = true, value = "HTTP response code")
  @NotNull  @Min(400) @Max(600)
  public Integer getCode() {
    return code;
  }

  public void setCode(Integer code) {
    this.code = code;
  }

  public ErrorModel stack(List<String> stack) {
    this.stack = stack;
    return this;
  }

  public ErrorModel addStackItem(String stackItem) {
    if (this.stack == null) {
      this.stack = new ArrayList<>();
    }
    this.stack.add(stackItem);
    return this;
  }

  /**
   * Get stack
   * @return stack
   **/
  @JsonProperty(value = "stack")
  @ApiModelProperty(value = "")
  
  public List<String> getStack() {
    return stack;
  }

  public void setStack(List<String> stack) {
    this.stack = stack;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorModel errorModel = (ErrorModel) o;
    return Objects.equals(this.message, errorModel.message) &&
        Objects.equals(this.type, errorModel.type) &&
        Objects.equals(this.code, errorModel.code) &&
        Objects.equals(this.stack, errorModel.stack);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, type, code, stack);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorModel {\n");
    
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    stack: ").append(toIndentedString(stack)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

