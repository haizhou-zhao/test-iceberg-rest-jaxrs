/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * SnapshotReference
 */
@JsonPropertyOrder({
  SnapshotReference.JSON_PROPERTY_TYPE,
  SnapshotReference.JSON_PROPERTY_SNAPSHOT_ID,
  SnapshotReference.JSON_PROPERTY_MAX_REF_AGE_MS,
  SnapshotReference.JSON_PROPERTY_MAX_SNAPSHOT_AGE_MS,
  SnapshotReference.JSON_PROPERTY_MIN_SNAPSHOTS_TO_KEEP
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class SnapshotReference   {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    TAG("tag"),
    
    BRANCH("branch");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private TypeEnum type;

  public static final String JSON_PROPERTY_SNAPSHOT_ID = "snapshot-id";
  @JsonProperty(JSON_PROPERTY_SNAPSHOT_ID)
  private Long snapshotId;

  public static final String JSON_PROPERTY_MAX_REF_AGE_MS = "max-ref-age-ms";
  @JsonProperty(JSON_PROPERTY_MAX_REF_AGE_MS)
  private Long maxRefAgeMs;

  public static final String JSON_PROPERTY_MAX_SNAPSHOT_AGE_MS = "max-snapshot-age-ms";
  @JsonProperty(JSON_PROPERTY_MAX_SNAPSHOT_AGE_MS)
  private Long maxSnapshotAgeMs;

  public static final String JSON_PROPERTY_MIN_SNAPSHOTS_TO_KEEP = "min-snapshots-to-keep";
  @JsonProperty(JSON_PROPERTY_MIN_SNAPSHOTS_TO_KEEP)
  private Integer minSnapshotsToKeep;

  public SnapshotReference type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SnapshotReference snapshotId(Long snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * Get snapshotId
   * @return snapshotId
   **/
  @JsonProperty(value = "snapshot-id")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public Long getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(Long snapshotId) {
    this.snapshotId = snapshotId;
  }

  public SnapshotReference maxRefAgeMs(Long maxRefAgeMs) {
    this.maxRefAgeMs = maxRefAgeMs;
    return this;
  }

  /**
   * Get maxRefAgeMs
   * @return maxRefAgeMs
   **/
  @JsonProperty(value = "max-ref-age-ms")
  @ApiModelProperty(value = "")
  
  public Long getMaxRefAgeMs() {
    return maxRefAgeMs;
  }

  public void setMaxRefAgeMs(Long maxRefAgeMs) {
    this.maxRefAgeMs = maxRefAgeMs;
  }

  public SnapshotReference maxSnapshotAgeMs(Long maxSnapshotAgeMs) {
    this.maxSnapshotAgeMs = maxSnapshotAgeMs;
    return this;
  }

  /**
   * Get maxSnapshotAgeMs
   * @return maxSnapshotAgeMs
   **/
  @JsonProperty(value = "max-snapshot-age-ms")
  @ApiModelProperty(value = "")
  
  public Long getMaxSnapshotAgeMs() {
    return maxSnapshotAgeMs;
  }

  public void setMaxSnapshotAgeMs(Long maxSnapshotAgeMs) {
    this.maxSnapshotAgeMs = maxSnapshotAgeMs;
  }

  public SnapshotReference minSnapshotsToKeep(Integer minSnapshotsToKeep) {
    this.minSnapshotsToKeep = minSnapshotsToKeep;
    return this;
  }

  /**
   * Get minSnapshotsToKeep
   * @return minSnapshotsToKeep
   **/
  @JsonProperty(value = "min-snapshots-to-keep")
  @ApiModelProperty(value = "")
  
  public Integer getMinSnapshotsToKeep() {
    return minSnapshotsToKeep;
  }

  public void setMinSnapshotsToKeep(Integer minSnapshotsToKeep) {
    this.minSnapshotsToKeep = minSnapshotsToKeep;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotReference snapshotReference = (SnapshotReference) o;
    return Objects.equals(this.type, snapshotReference.type) &&
        Objects.equals(this.snapshotId, snapshotReference.snapshotId) &&
        Objects.equals(this.maxRefAgeMs, snapshotReference.maxRefAgeMs) &&
        Objects.equals(this.maxSnapshotAgeMs, snapshotReference.maxSnapshotAgeMs) &&
        Objects.equals(this.minSnapshotsToKeep, snapshotReference.minSnapshotsToKeep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, snapshotId, maxRefAgeMs, maxSnapshotAgeMs, minSnapshotsToKeep);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotReference {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    maxRefAgeMs: ").append(toIndentedString(maxRefAgeMs)).append("\n");
    sb.append("    maxSnapshotAgeMs: ").append(toIndentedString(maxSnapshotAgeMs)).append("\n");
    sb.append("    minSnapshotsToKeep: ").append(toIndentedString(minSnapshotsToKeep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

