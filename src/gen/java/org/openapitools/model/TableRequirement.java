/*
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Assertions from the client that must be valid for the commit to succeed. Assertions are identified by &#x60;type&#x60; - - &#x60;assert-create&#x60; - the table must not already exist; used for create transactions - &#x60;assert-table-uuid&#x60; - the table UUID must match the requirement&#39;s &#x60;uuid&#x60; - &#x60;assert-ref-snapshot-id&#x60; - the table branch or tag identified by the requirement&#39;s &#x60;ref&#x60; must reference the requirement&#39;s &#x60;snapshot-id&#x60;; if &#x60;snapshot-id&#x60; is &#x60;null&#x60; or missing, the ref must not already exist - &#x60;assert-last-assigned-field-id&#x60; - the table&#39;s last assigned column id must match the requirement&#39;s &#x60;last-assigned-field-id&#x60; - &#x60;assert-current-schema-id&#x60; - the table&#39;s current schema id must match the requirement&#39;s &#x60;current-schema-id&#x60; - &#x60;assert-last-assigned-partition-id&#x60; - the table&#39;s last assigned partition id must match the requirement&#39;s &#x60;last-assigned-partition-id&#x60; - &#x60;assert-default-spec-id&#x60; - the table&#39;s default spec id must match the requirement&#39;s &#x60;default-spec-id&#x60; - &#x60;assert-default-sort-order-id&#x60; - the table&#39;s default sort order id must match the requirement&#39;s &#x60;default-sort-order-id&#x60;
 */
@ApiModel(description = "Assertions from the client that must be valid for the commit to succeed. Assertions are identified by `type` - - `assert-create` - the table must not already exist; used for create transactions - `assert-table-uuid` - the table UUID must match the requirement's `uuid` - `assert-ref-snapshot-id` - the table branch or tag identified by the requirement's `ref` must reference the requirement's `snapshot-id`; if `snapshot-id` is `null` or missing, the ref must not already exist - `assert-last-assigned-field-id` - the table's last assigned column id must match the requirement's `last-assigned-field-id` - `assert-current-schema-id` - the table's current schema id must match the requirement's `current-schema-id` - `assert-last-assigned-partition-id` - the table's last assigned partition id must match the requirement's `last-assigned-partition-id` - `assert-default-spec-id` - the table's default spec id must match the requirement's `default-spec-id` - `assert-default-sort-order-id` - the table's default sort order id must match the requirement's `default-sort-order-id`")
@JsonPropertyOrder({
  TableRequirement.JSON_PROPERTY_REQUIREMENT,
  TableRequirement.JSON_PROPERTY_REF,
  TableRequirement.JSON_PROPERTY_UUID,
  TableRequirement.JSON_PROPERTY_SNAPSHOT_ID,
  TableRequirement.JSON_PROPERTY_LAST_ASSIGNED_FIELD_ID,
  TableRequirement.JSON_PROPERTY_CURRENT_SCHEMA_ID,
  TableRequirement.JSON_PROPERTY_LAST_ASSIGNED_PARTITION_ID,
  TableRequirement.JSON_PROPERTY_DEFAULT_SPEC_ID,
  TableRequirement.JSON_PROPERTY_DEFAULT_SORT_ORDER_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2023-02-09T17:36:38.183060-08:00[America/Los_Angeles]")
public class TableRequirement   {
  /**
   * Gets or Sets requirement
   */
  public enum RequirementEnum {
    CREATE("assert-create"),
    
    TABLE_UUID("assert-table-uuid"),
    
    REF_SNAPSHOT_ID("assert-ref-snapshot-id"),
    
    LAST_ASSIGNED_FIELD_ID("assert-last-assigned-field-id"),
    
    CURRENT_SCHEMA_ID("assert-current-schema-id"),
    
    LAST_ASSIGNED_PARTITION_ID("assert-last-assigned-partition-id"),
    
    DEFAULT_SPEC_ID("assert-default-spec-id"),
    
    DEFAULT_SORT_ORDER_ID("assert-default-sort-order-id");

    private String value;

    RequirementEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RequirementEnum fromValue(String value) {
      for (RequirementEnum b : RequirementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REQUIREMENT = "requirement";
  @JsonProperty(JSON_PROPERTY_REQUIREMENT)
  private RequirementEnum requirement;

  public static final String JSON_PROPERTY_REF = "ref";
  @JsonProperty(JSON_PROPERTY_REF)
  private String ref;

  public static final String JSON_PROPERTY_UUID = "uuid";
  @JsonProperty(JSON_PROPERTY_UUID)
  private String uuid;

  public static final String JSON_PROPERTY_SNAPSHOT_ID = "snapshot-id";
  @JsonProperty(JSON_PROPERTY_SNAPSHOT_ID)
  private Long snapshotId;

  public static final String JSON_PROPERTY_LAST_ASSIGNED_FIELD_ID = "last-assigned-field-id";
  @JsonProperty(JSON_PROPERTY_LAST_ASSIGNED_FIELD_ID)
  private Integer lastAssignedFieldId;

  public static final String JSON_PROPERTY_CURRENT_SCHEMA_ID = "current-schema-id";
  @JsonProperty(JSON_PROPERTY_CURRENT_SCHEMA_ID)
  private Integer currentSchemaId;

  public static final String JSON_PROPERTY_LAST_ASSIGNED_PARTITION_ID = "last-assigned-partition-id";
  @JsonProperty(JSON_PROPERTY_LAST_ASSIGNED_PARTITION_ID)
  private Integer lastAssignedPartitionId;

  public static final String JSON_PROPERTY_DEFAULT_SPEC_ID = "default-spec-id";
  @JsonProperty(JSON_PROPERTY_DEFAULT_SPEC_ID)
  private Integer defaultSpecId;

  public static final String JSON_PROPERTY_DEFAULT_SORT_ORDER_ID = "default-sort-order-id";
  @JsonProperty(JSON_PROPERTY_DEFAULT_SORT_ORDER_ID)
  private Integer defaultSortOrderId;

  public TableRequirement requirement(RequirementEnum requirement) {
    this.requirement = requirement;
    return this;
  }

  /**
   * Get requirement
   * @return requirement
   **/
  @JsonProperty(value = "requirement")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public RequirementEnum getRequirement() {
    return requirement;
  }

  public void setRequirement(RequirementEnum requirement) {
    this.requirement = requirement;
  }

  public TableRequirement ref(String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * Get ref
   * @return ref
   **/
  @JsonProperty(value = "ref")
  @ApiModelProperty(value = "")
  
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }

  public TableRequirement uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   **/
  @JsonProperty(value = "uuid")
  @ApiModelProperty(value = "")
  
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public TableRequirement snapshotId(Long snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * Get snapshotId
   * @return snapshotId
   **/
  @JsonProperty(value = "snapshot-id")
  @ApiModelProperty(value = "")
  
  public Long getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(Long snapshotId) {
    this.snapshotId = snapshotId;
  }

  public TableRequirement lastAssignedFieldId(Integer lastAssignedFieldId) {
    this.lastAssignedFieldId = lastAssignedFieldId;
    return this;
  }

  /**
   * Get lastAssignedFieldId
   * @return lastAssignedFieldId
   **/
  @JsonProperty(value = "last-assigned-field-id")
  @ApiModelProperty(value = "")
  
  public Integer getLastAssignedFieldId() {
    return lastAssignedFieldId;
  }

  public void setLastAssignedFieldId(Integer lastAssignedFieldId) {
    this.lastAssignedFieldId = lastAssignedFieldId;
  }

  public TableRequirement currentSchemaId(Integer currentSchemaId) {
    this.currentSchemaId = currentSchemaId;
    return this;
  }

  /**
   * Get currentSchemaId
   * @return currentSchemaId
   **/
  @JsonProperty(value = "current-schema-id")
  @ApiModelProperty(value = "")
  
  public Integer getCurrentSchemaId() {
    return currentSchemaId;
  }

  public void setCurrentSchemaId(Integer currentSchemaId) {
    this.currentSchemaId = currentSchemaId;
  }

  public TableRequirement lastAssignedPartitionId(Integer lastAssignedPartitionId) {
    this.lastAssignedPartitionId = lastAssignedPartitionId;
    return this;
  }

  /**
   * Get lastAssignedPartitionId
   * @return lastAssignedPartitionId
   **/
  @JsonProperty(value = "last-assigned-partition-id")
  @ApiModelProperty(value = "")
  
  public Integer getLastAssignedPartitionId() {
    return lastAssignedPartitionId;
  }

  public void setLastAssignedPartitionId(Integer lastAssignedPartitionId) {
    this.lastAssignedPartitionId = lastAssignedPartitionId;
  }

  public TableRequirement defaultSpecId(Integer defaultSpecId) {
    this.defaultSpecId = defaultSpecId;
    return this;
  }

  /**
   * Get defaultSpecId
   * @return defaultSpecId
   **/
  @JsonProperty(value = "default-spec-id")
  @ApiModelProperty(value = "")
  
  public Integer getDefaultSpecId() {
    return defaultSpecId;
  }

  public void setDefaultSpecId(Integer defaultSpecId) {
    this.defaultSpecId = defaultSpecId;
  }

  public TableRequirement defaultSortOrderId(Integer defaultSortOrderId) {
    this.defaultSortOrderId = defaultSortOrderId;
    return this;
  }

  /**
   * Get defaultSortOrderId
   * @return defaultSortOrderId
   **/
  @JsonProperty(value = "default-sort-order-id")
  @ApiModelProperty(value = "")
  
  public Integer getDefaultSortOrderId() {
    return defaultSortOrderId;
  }

  public void setDefaultSortOrderId(Integer defaultSortOrderId) {
    this.defaultSortOrderId = defaultSortOrderId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableRequirement tableRequirement = (TableRequirement) o;
    return Objects.equals(this.requirement, tableRequirement.requirement) &&
        Objects.equals(this.ref, tableRequirement.ref) &&
        Objects.equals(this.uuid, tableRequirement.uuid) &&
        Objects.equals(this.snapshotId, tableRequirement.snapshotId) &&
        Objects.equals(this.lastAssignedFieldId, tableRequirement.lastAssignedFieldId) &&
        Objects.equals(this.currentSchemaId, tableRequirement.currentSchemaId) &&
        Objects.equals(this.lastAssignedPartitionId, tableRequirement.lastAssignedPartitionId) &&
        Objects.equals(this.defaultSpecId, tableRequirement.defaultSpecId) &&
        Objects.equals(this.defaultSortOrderId, tableRequirement.defaultSortOrderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requirement, ref, uuid, snapshotId, lastAssignedFieldId, currentSchemaId, lastAssignedPartitionId, defaultSpecId, defaultSortOrderId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableRequirement {\n");
    
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    lastAssignedFieldId: ").append(toIndentedString(lastAssignedFieldId)).append("\n");
    sb.append("    currentSchemaId: ").append(toIndentedString(currentSchemaId)).append("\n");
    sb.append("    lastAssignedPartitionId: ").append(toIndentedString(lastAssignedPartitionId)).append("\n");
    sb.append("    defaultSpecId: ").append(toIndentedString(defaultSpecId)).append("\n");
    sb.append("    defaultSortOrderId: ").append(toIndentedString(defaultSortOrderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

